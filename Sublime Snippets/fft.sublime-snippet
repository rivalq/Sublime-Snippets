<snippet>
  <content><![CDATA[
// optimized version of  fft(iterative)
#define base         complex<double>
// fft->true=inverse fft
// fft->false=direct fft 
void fft(vector<base> &a,bool direction){
   if(sz(a)==1)return;
   int n=sz(a);
   for(int i=1,j=0;i<n;i++){
    int bit=n>>1;
    for(;j>=bit;bit>>=1)j-=bit;
    j+=bit;
    if(i<j)swap(a[i],a[j]);
   }
   // original vector {ao,a1,a2,a3,a4.....}
   // now vector will look like {a0,a2,a4...|a1,a3,a5,a7...}
   for (int d=2;d<=n;d<<=1){
        double ang=2*pi/d*(direction?-1:1);
        base wd(cos(ang),sin(ang));
        for(int i=0;i<n;i+=d) {
            base w(1);
            for (int j=0;j<d/2;++j) {
                base u=a[i+j],v=a[i+j+d/2] * w;
                a[i+j]=u+v;
                a[i+j+d/2]=u-v;
                w*=wd;
            }
        }
    }
    if(direction){
        for(int i=0;i<n;++i)a[i]/=n;
    }		
}
// c=a*b
void multiply(vector<int>&a,vector<int>&b,vector<int>&c){
 vector<base> A(all(a)),B(all(b));
 int n=1;
 while(n<max(sz(a),sz(b)))n=n<<1;
 n=n<<1;
 A.resize(n),B.resize(n);
 fft(A,false);
 fft(B,false);
 for(int i=0;i<n;i++){
     A[i]=A[i]*B[i];
 }
 fft(A,true);
 c.resize(n);
 for(int i=0;i<n;i++)c[i]=(int)(A[i].real()+0.5); // this will not work for negative numbers
}
]]></content>
  <tabTrigger>fft</tabTrigger>
  <description>fft</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>